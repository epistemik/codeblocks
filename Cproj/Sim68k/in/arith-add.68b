/ ; ******************************************************* /
/ ; *** Arith.68                                        *** /
/ ; *** Tests the arithmetic instructions of Sim68k     *** /
/ ; *** Tests ADD, ADDQ, SUB, SUBQ, MULS, DIVS, NEG     *** /
/ ; *** Uses  MOVE, MOVEQ, BRA, BVS, INP, DSR, DSP, HLT *** /
/ ; ******************************************************* /
/  /
/ ;   Assembly Language       OpCode   Oper1   Oper2  /
/ ;                           MSB LSB MSB LSB MSB LSB /
/ ;-------------------------------------------------- /
/ ; Branch to the first instruction /
/ BRA.W @Main             ; / $92 $60 $00 $14
/  /
/ ; Declarations /
/ DEF.W @Var1, #$4334     ; / $43 $34
/ DEF.W @Var2, #$5678     ; / $56 $78
/ DEF.L @Var3, #$FFFF90AB ; / $FF $FF $90 $AB
/ DEF.L @Var4, #$FFFFCDEF ; / $FF $FF $CD $EF
/ DEF.L @Var5, #$000000F6 ; / $00 $00 $00 $F6
/  /
/ ; Main program /
/ LABEL @Main             ; /
/  /
/ ; Tests ADD and ADDQ /
/ ;----------------------- /
/     ADD.B @Var1, @Var2  ; / $01 $66 $00 $04 $00 $06
/ ; *** Overflow, V = True /
/     DSR.B               ; / $F0 $00
/     DSP.W @Var2         ; / $EA $60 $00 $06
/  /
/     ADD.W @Var1, @Var2  ; / $03 $66 $00 $04 $00 $06
/ ; *** No Overflow, V = False /
/     DSR.B               ; / $F0 $00
/     DSP.W @Var2         ; / $EA $60 $00 $06
/  /
/     MOVE.L @Var5, D0    ; / $C5 $60 $00 $10
/     ADDQ.B #$A, D0      ; / $08 $A0
/ ; *** Carry, C = True /
/     DSR.B               ; / $F0 $00
/     DSP.L D0            ; / $EC $00
/  /
/     MOVE.L @Var5, D0    ; / $C5 $60 $00 $10
/     ADDQ.W #$A, D0      ; / $0A $A0
/ ; *** No Carry, C = False /
/     DSR.B               ; / $F0 $00
/     DSP.L D0            ; / $EC $00
/  /
/     ADD.L @Var3, @Var4  ; / $05 $66 $00 $08 $00 $0C
/ ; *** Carry /
/     DSR.B               ; / $F0 $00
/     DSP.L @Var4         ; / $EC $60 $00 $0C
/  /
/ LABEL @End              ; /
/     HLT.B               ; / $F8 $00
